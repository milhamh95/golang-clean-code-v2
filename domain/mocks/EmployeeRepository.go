// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/milhamhidayat/golang-clean-code-v2/domain"
	mock "github.com/stretchr/testify/mock"
)

// EmployeeRepository is an autogenerated mock type for the EmployeeRepository type
type EmployeeRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, e
func (_m *EmployeeRepository) Create(ctx context.Context, e *domain.Employee) error {
	ret := _m.Called(ctx, e)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Employee) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, employeeID
func (_m *EmployeeRepository) Delete(ctx context.Context, employeeID string) error {
	ret := _m.Called(ctx, employeeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, employeeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, filter
func (_m *EmployeeRepository) Fetch(ctx context.Context, filter domain.EmployeeFilter) ([]domain.Employee, string, error) {
	ret := _m.Called(ctx, filter)

	var r0 []domain.Employee
	if rf, ok := ret.Get(0).(func(context.Context, domain.EmployeeFilter) []domain.Employee); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Employee)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, domain.EmployeeFilter) string); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, domain.EmployeeFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: ctx, employeeID
func (_m *EmployeeRepository) Get(ctx context.Context, employeeID string) (domain.Employee, error) {
	ret := _m.Called(ctx, employeeID)

	var r0 domain.Employee
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Employee); ok {
		r0 = rf(ctx, employeeID)
	} else {
		r0 = ret.Get(0).(domain.Employee)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, employeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, e
func (_m *EmployeeRepository) Update(ctx context.Context, e domain.Employee) (domain.Employee, error) {
	ret := _m.Called(ctx, e)

	var r0 domain.Employee
	if rf, ok := ret.Get(0).(func(context.Context, domain.Employee) domain.Employee); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Get(0).(domain.Employee)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Employee) error); ok {
		r1 = rf(ctx, e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
