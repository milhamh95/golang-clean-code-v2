openapi: "3.0.1"
info:
  title: "Employee REST API"
  description: "Employee REST API"
  version: "1.0.0"
servers:
  - url: "localhost:8500"
    description: "Development"
paths:
  "/employees":
    get:
      tags:
        - Employee
      summary: "Fetch employeee based on query param"
      operationId: "fetchEmployee"
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/filterIDs"
        - $ref: "#/components/parameters/filterKeyword"
        - $ref: "#/components/parameters/paginationNum"
        - $ref: "#/components/parameters/paginationCursor"
        - $ref: "#/components/parameters/IfNoneMatch"
        - in: "query"
          name: "deptIds"
          description: "Comma-separated identifier of department ids"
          schema:
            type: array
            items:
              type: string
            example: ["1", "2"]
          style: "form"
          explode: false
          required: false
      responses:
        "200":
          description: "Return all employees based on the filter"
          headers:
            X-Cursor:
              description: "Cursor used for pagination"
              schema:
                type: "string"
            ETag:
              description: "Entity-Tag used for caching"
              schema:
                type: "string"
        "304":
          $ref: "#/components/responses/NotModified"
        "400":
          $ref: "#components/responses/BadRequest"
    post:
      tags:
        - Employee
      summary: "Create an employee"
      operationId: "createEmployee"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
    put:
      tags:
        - Employee
      summary: "Update an employee"
      operationId: "updateEmployee"
      parameters:
        - name: "employeeId"
          in: "path"
          required: true
          description: "ID of an employee to be updated"
          schema:
            type: "string"
      responses:
        "200":
          description: "Employee succesfully updated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Employee
      summary: "Delete an employee"
      operationId: "deleteEmployee"
      parameters:
        - name: "employeeId"
          in: "path"
          required: true
          description: "ID of an employee to be deleted"
          schema:
            type: "string"
      responses:
        "204":
          description: "Employee succesfully deleted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/employees/{employeeId}":
    get:
      tags:
        - Employee
      summary: "Get an employee by id"
      operationId: "getEmployee"
      parameters:
        - name: "employeeId"
          in: "path"
          required: true
          description: "ID of an employee want to get"
          schema:
            type: "string"
      responses:
        "200":
          description: "The employee is found"
          headers:
            ETag:
              schema:
                type: "string"
              description: "Entity-tag used for caching"
        "304":
          $ref: "#/components/responses/NotModified"
        "404":
          description: "#/components/responses/NotFound"
  "/departments/":
    get:
      tags:
        - Department
      summary: "Fetch department by given params"
      operationId: "fetchDepartmenta"
      parameters:
        - $ref: "#/components/parameters/filterIDs"
        - $ref: "#/components/parameters/filterKeyword"
        - $ref: "#/components/parameters/paginationNum"
        - $ref: "#/components/parameters/paginationCursor"
        - $ref: "#/components/parameters/IfNoneMatch"
      responses:
        "200":
          description: "Return all departments based on the filter"
          headers:
            X-Cursor:
              description: "Cursor used for pagination"
              schema:
                type: "string"
            ETag:
              description: "Entity-Tag used for caching"
              schema:
                type: "string"
        "304":
          $ref: "#/components/responses/NotModified"
        "400":
          $ref: "#components/responses/BadRequest"
    post:
      tags:
        - Department
      summary: "Create a department"
      operationId: "createDepartment"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
    put:
      tags:
        - Department
      summary: "Update a department"
      operationId: "updateDepartment"
      parameters:
        - name: "departmentId"
          in: "path"
          required: true
          description: "ID of a department to be updated"
          schema:
            type: "string"
      responses:
        "200":
          description: "Department succesfully updated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Department
      summary: "Delete n department"
      operationId: "deleteDepartment"
      parameters:
        - name: "departmentId"
          in: "path"
          required: true
          description: "ID of an employee to be deleted"
          schema:
            type: "string"
      responses:
        "204":
          description: "Department succesfully deleted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/departments/{departmentId}":
    get:
      tags:
        - Department
      summary: "Get a department by id"
      operationId: "getDepartment"
      parameters:
        - name: "departmentId"
          in: "path"
          required: true
          description: "ID of a department want to get"
          schema:
            type: "string"
      responses:
        "200":
          description: "The department is found"
          headers:
            ETag:
              schema:
                type: "string"
              description: "Entity-tag used for caching"
        "304":
          $ref: "#/components/responses/NotModified"
        "404":
          description: "#/components/responses/NotFound"
components:
  parameters:
    paginationCursor:
      in: "query"
      name: "cursor"
      description: "The cursor for getting next page item"
      schema:
        type: "string"
      required: false
    paginationNum:
      in: "query"
      name: "num"
      description: "Number of items to be returned in a page. Defaults is 20"
      schema:
        type: "integer"
        default: 20
      required: false
    filterIDs:
      in: "query"
      name: "ids"
      description: "Comma-separated identifier of the object to be retrieved."
      schema:
        type: array
        items:
          type: string
        example: ["1", "2"]
      style: "form"
      explode: false
      required: false
    filterKeyword:
      in: "query"
      name: "keyword"
      description: "The keyword to filter objects"
      schema:
        type: "string"
      required: false
    IfNoneMatch:
      in: "header"
      name: "If-None-Match"
      description: "The entity tag sent by the server. This is used in caching. Refer to: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26"
      schema:
        type: "string"
      required: false
  responses:
    NotModified:
      description: "Not modified"
    BadRequest:
      description: "Bad Input Parameter"
    NotFound:
      description: "Not found"
    Created:
      description: "Created"
